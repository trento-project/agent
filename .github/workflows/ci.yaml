name: Continuous Integration

on:
  push:
    branches:
      - "main"
    paths-ignore:
      - "VERSION"
      - "CHANGELOG.md"
  pull_request:
    paths-ignore:
      - "VERSION"
  workflow_dispatch:
  workflow_call:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  generate-docs:
    runs-on: ubuntu-24.04
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main')
    steps:
      - name: trigger docs update in sum.golang.org and pkg.go.dev
        uses: essentialkaos/godoc-action@v1

  static-code-analysis:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Read .tool-versions
        uses: endorama/asdf-parse-tool-versions@v1
        id: tool-versions
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - uses: actions/cache@v4.2.3
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: go-${{ env.GOLANG_VERSION }}-${{ hashFiles('**/go.sum') }}
      - name: go vet check
        run: make vet-check
      - name: go fmt check
        run: make fmt-check
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: v1.63.4
          skip-cache: true
          args: "--timeout=3m"

  test-with-go:
    runs-on: ubuntu-24.04
    env:
      RABBITMQ_URL: amqp://guest:guest@localhost:5675
    steps:
      - uses: actions/checkout@v4
      - name: Read .tool-versions
        uses: endorama/asdf-parse-tool-versions@v1
        id: tool-versions
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - uses: actions/cache@v4.2.3
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: go-${{ env.GOLANG_VERSION }}-${{ hashFiles('**/go.sum') }}
      - name: "Docker compose dependencies"
        uses: isbang/compose-action@v2.2.0
        with:
          compose-file: "./docker-compose.yaml"
          down-flags: "--volumes"
      - name: Wait for RabbitMQ
        run: |
          until timeout 1 bash -c "cat < /dev/null > /dev/tcp/localhost/5675"; do
            echo "Waiting for RabbitMQ to be ready..."
            sleep 10
          done
          echo "RabbitMQ is up and running!"
      - name: test
        run: make test-coverage
      - name: send coverage to Coveralls
        if: vars.COVERALLS_ENABLED == 'true'
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          go install github.com/mattn/goveralls@latest
          goveralls -coverprofile=covprofile -service=github

  test-with-bats:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Read .tool-versions
        uses: endorama/asdf-parse-tool-versions@v1
        id: tool-versions
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GOLANG_VERSION }}
      - uses: actions/cache@v4.2.3
        id: go-cache
        with:
          path: ~/go/pkg/mod
          key: go-${{ env.GOLANG_VERSION }}-${{ hashFiles('**/go.sum') }}
      - name: build plugins
        run: make build-plugin-examples
      - name: build trento binary
        run: make build
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.11.1
      - name: run tests
        run: make test-build

  obs-sync:
    name: OBS sync
    if: vars.OBS_ENABLED == 'true' && (github.event_name == 'push' && github.ref_name == 'main') || github.event_name == 'workflow_dispatch'
    uses: ./.github/workflows/obs.yaml
    needs:
      - static-code-analysis
      - test-with-go
      - test-with-bats
    secrets: inherit
    with:
      obs_project: ${{ vars.OBS_PROJECT_ROLLING }}
