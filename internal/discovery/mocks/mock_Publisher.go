// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockPublisher is an autogenerated mock type for the Publisher type
type MockPublisher struct {
	mock.Mock
}

type MockPublisher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPublisher) EXPECT() *MockPublisher_Expecter {
	return &MockPublisher_Expecter{mock: &_m.Mock}
}

// DiscoverAndPublish provides a mock function with given fields: ctx
func (_m *MockPublisher) DiscoverAndPublish(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverAndPublish")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockPublisher_DiscoverAndPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverAndPublish'
type MockPublisher_DiscoverAndPublish_Call struct {
	*mock.Call
}

// DiscoverAndPublish is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockPublisher_Expecter) DiscoverAndPublish(ctx interface{}) *MockPublisher_DiscoverAndPublish_Call {
	return &MockPublisher_DiscoverAndPublish_Call{Call: _e.mock.On("DiscoverAndPublish", ctx)}
}

func (_c *MockPublisher_DiscoverAndPublish_Call) Run(run func(ctx context.Context)) *MockPublisher_DiscoverAndPublish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockPublisher_DiscoverAndPublish_Call) Return(_a0 string, _a1 error) *MockPublisher_DiscoverAndPublish_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPublisher_DiscoverAndPublish_Call) RunAndReturn(run func(context.Context) (string, error)) *MockPublisher_DiscoverAndPublish_Call {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with no fields
func (_m *MockPublisher) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockPublisher_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockPublisher_GetID_Call struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockPublisher_Expecter) GetID() *MockPublisher_GetID_Call {
	return &MockPublisher_GetID_Call{Call: _e.mock.On("GetID")}
}

func (_c *MockPublisher_GetID_Call) Run(run func()) *MockPublisher_GetID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublisher_GetID_Call) Return(_a0 string) *MockPublisher_GetID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_GetID_Call) RunAndReturn(run func() string) *MockPublisher_GetID_Call {
	_c.Call.Return(run)
	return _c
}

// GetInterval provides a mock function with no fields
func (_m *MockPublisher) GetInterval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockPublisher_GetInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInterval'
type MockPublisher_GetInterval_Call struct {
	*mock.Call
}

// GetInterval is a helper method to define mock.On call
func (_e *MockPublisher_Expecter) GetInterval() *MockPublisher_GetInterval_Call {
	return &MockPublisher_GetInterval_Call{Call: _e.mock.On("GetInterval")}
}

func (_c *MockPublisher_GetInterval_Call) Run(run func()) *MockPublisher_GetInterval_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockPublisher_GetInterval_Call) Return(_a0 time.Duration) *MockPublisher_GetInterval_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPublisher_GetInterval_Call) RunAndReturn(run func() time.Duration) *MockPublisher_GetInterval_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPublisher creates a new instance of MockPublisher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPublisher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPublisher {
	mock := &MockPublisher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
