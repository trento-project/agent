// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockDiscovery is an autogenerated mock type for the Discovery type
type MockDiscovery[T interface{}] struct {
	mock.Mock
}

type MockDiscovery_Expecter[T interface{}] struct {
	mock *mock.Mock
}

func (_m *MockDiscovery[T]) EXPECT() *MockDiscovery_Expecter[T] {
	return &MockDiscovery_Expecter[T]{mock: &_m.Mock}
}

// Discover provides a mock function with given fields: ctx
func (_m *MockDiscovery[T]) Discover(ctx context.Context) (T, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Discover")
	}

	var r0 T
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (T, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) T); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(T)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscovery_Discover_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Discover'
type MockDiscovery_Discover_Call[T interface{}] struct {
	*mock.Call
}

// Discover is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDiscovery_Expecter[T]) Discover(ctx interface{}) *MockDiscovery_Discover_Call[T] {
	return &MockDiscovery_Discover_Call[T]{Call: _e.mock.On("Discover", ctx)}
}

func (_c *MockDiscovery_Discover_Call[T]) Run(run func(ctx context.Context)) *MockDiscovery_Discover_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDiscovery_Discover_Call[T]) Return(_a0 T, _a1 error) *MockDiscovery_Discover_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscovery_Discover_Call[T]) RunAndReturn(run func(context.Context) (T, error)) *MockDiscovery_Discover_Call[T] {
	_c.Call.Return(run)
	return _c
}

// DiscoverAndPublish provides a mock function with given fields: ctx
func (_m *MockDiscovery[T]) DiscoverAndPublish(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for DiscoverAndPublish")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDiscovery_DiscoverAndPublish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiscoverAndPublish'
type MockDiscovery_DiscoverAndPublish_Call[T interface{}] struct {
	*mock.Call
}

// DiscoverAndPublish is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockDiscovery_Expecter[T]) DiscoverAndPublish(ctx interface{}) *MockDiscovery_DiscoverAndPublish_Call[T] {
	return &MockDiscovery_DiscoverAndPublish_Call[T]{Call: _e.mock.On("DiscoverAndPublish", ctx)}
}

func (_c *MockDiscovery_DiscoverAndPublish_Call[T]) Run(run func(ctx context.Context)) *MockDiscovery_DiscoverAndPublish_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockDiscovery_DiscoverAndPublish_Call[T]) Return(_a0 string, _a1 error) *MockDiscovery_DiscoverAndPublish_Call[T] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDiscovery_DiscoverAndPublish_Call[T]) RunAndReturn(run func(context.Context) (string, error)) *MockDiscovery_DiscoverAndPublish_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetID provides a mock function with no fields
func (_m *MockDiscovery[T]) GetID() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetID")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockDiscovery_GetID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetID'
type MockDiscovery_GetID_Call[T interface{}] struct {
	*mock.Call
}

// GetID is a helper method to define mock.On call
func (_e *MockDiscovery_Expecter[T]) GetID() *MockDiscovery_GetID_Call[T] {
	return &MockDiscovery_GetID_Call[T]{Call: _e.mock.On("GetID")}
}

func (_c *MockDiscovery_GetID_Call[T]) Run(run func()) *MockDiscovery_GetID_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscovery_GetID_Call[T]) Return(_a0 string) *MockDiscovery_GetID_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscovery_GetID_Call[T]) RunAndReturn(run func() string) *MockDiscovery_GetID_Call[T] {
	_c.Call.Return(run)
	return _c
}

// GetInterval provides a mock function with no fields
func (_m *MockDiscovery[T]) GetInterval() time.Duration {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetInterval")
	}

	var r0 time.Duration
	if rf, ok := ret.Get(0).(func() time.Duration); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	return r0
}

// MockDiscovery_GetInterval_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInterval'
type MockDiscovery_GetInterval_Call[T interface{}] struct {
	*mock.Call
}

// GetInterval is a helper method to define mock.On call
func (_e *MockDiscovery_Expecter[T]) GetInterval() *MockDiscovery_GetInterval_Call[T] {
	return &MockDiscovery_GetInterval_Call[T]{Call: _e.mock.On("GetInterval")}
}

func (_c *MockDiscovery_GetInterval_Call[T]) Run(run func()) *MockDiscovery_GetInterval_Call[T] {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDiscovery_GetInterval_Call[T]) Return(_a0 time.Duration) *MockDiscovery_GetInterval_Call[T] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockDiscovery_GetInterval_Call[T]) RunAndReturn(run func() time.Duration) *MockDiscovery_GetInterval_Call[T] {
	_c.Call.Return(run)
	return _c
}

// NewMockDiscovery creates a new instance of MockDiscovery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDiscovery[T interface{}](t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDiscovery[T] {
	mock := &MockDiscovery[T]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
