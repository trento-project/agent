// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dbus "github.com/coreos/go-systemd/v22/dbus"
	mock "github.com/stretchr/testify/mock"
)

// MockDbusConnector is an autogenerated mock type for the DbusConnector type
type MockDbusConnector struct {
	mock.Mock
}

type MockDbusConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDbusConnector) EXPECT() *MockDbusConnector_Expecter {
	return &MockDbusConnector_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MockDbusConnector) Close() {
	_m.Called()
}

// MockDbusConnector_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockDbusConnector_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockDbusConnector_Expecter) Close() *MockDbusConnector_Close_Call {
	return &MockDbusConnector_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockDbusConnector_Close_Call) Run(run func()) *MockDbusConnector_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDbusConnector_Close_Call) Return() *MockDbusConnector_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockDbusConnector_Close_Call) RunAndReturn(run func()) *MockDbusConnector_Close_Call {
	_c.Call.Return(run)
	return _c
}

// GetUnitPropertiesContext provides a mock function with given fields: ctx, unit
func (_m *MockDbusConnector) GetUnitPropertiesContext(ctx context.Context, unit string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, unit)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]interface{}, error)); ok {
		return rf(ctx, unit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, unit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, unit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbusConnector_GetUnitPropertiesContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUnitPropertiesContext'
type MockDbusConnector_GetUnitPropertiesContext_Call struct {
	*mock.Call
}

// GetUnitPropertiesContext is a helper method to define mock.On call
//   - ctx context.Context
//   - unit string
func (_e *MockDbusConnector_Expecter) GetUnitPropertiesContext(ctx interface{}, unit interface{}) *MockDbusConnector_GetUnitPropertiesContext_Call {
	return &MockDbusConnector_GetUnitPropertiesContext_Call{Call: _e.mock.On("GetUnitPropertiesContext", ctx, unit)}
}

func (_c *MockDbusConnector_GetUnitPropertiesContext_Call) Run(run func(ctx context.Context, unit string)) *MockDbusConnector_GetUnitPropertiesContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockDbusConnector_GetUnitPropertiesContext_Call) Return(_a0 map[string]interface{}, _a1 error) *MockDbusConnector_GetUnitPropertiesContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbusConnector_GetUnitPropertiesContext_Call) RunAndReturn(run func(context.Context, string) (map[string]interface{}, error)) *MockDbusConnector_GetUnitPropertiesContext_Call {
	_c.Call.Return(run)
	return _c
}

// ListUnitsByNamesContext provides a mock function with given fields: ctx, units
func (_m *MockDbusConnector) ListUnitsByNamesContext(ctx context.Context, units []string) ([]dbus.UnitStatus, error) {
	ret := _m.Called(ctx, units)

	var r0 []dbus.UnitStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]dbus.UnitStatus, error)); ok {
		return rf(ctx, units)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []dbus.UnitStatus); ok {
		r0 = rf(ctx, units)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbus.UnitStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, units)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockDbusConnector_ListUnitsByNamesContext_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListUnitsByNamesContext'
type MockDbusConnector_ListUnitsByNamesContext_Call struct {
	*mock.Call
}

// ListUnitsByNamesContext is a helper method to define mock.On call
//   - ctx context.Context
//   - units []string
func (_e *MockDbusConnector_Expecter) ListUnitsByNamesContext(ctx interface{}, units interface{}) *MockDbusConnector_ListUnitsByNamesContext_Call {
	return &MockDbusConnector_ListUnitsByNamesContext_Call{Call: _e.mock.On("ListUnitsByNamesContext", ctx, units)}
}

func (_c *MockDbusConnector_ListUnitsByNamesContext_Call) Run(run func(ctx context.Context, units []string)) *MockDbusConnector_ListUnitsByNamesContext_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockDbusConnector_ListUnitsByNamesContext_Call) Return(_a0 []dbus.UnitStatus, _a1 error) *MockDbusConnector_ListUnitsByNamesContext_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockDbusConnector_ListUnitsByNamesContext_Call) RunAndReturn(run func(context.Context, []string) ([]dbus.UnitStatus, error)) *MockDbusConnector_ListUnitsByNamesContext_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDbusConnector creates a new instance of MockDbusConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDbusConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDbusConnector {
	mock := &MockDbusConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
