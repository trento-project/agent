// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	sapcontrolapi "github.com/trento-project/agent/internal/core/sapsystem/sapcontrolapi"
)

// WebService is an autogenerated mock type for the WebService type
type WebService struct {
	mock.Mock
}

// GetInstanceProperties provides a mock function with given fields:
func (_m *WebService) GetInstanceProperties() (*sapcontrolapi.GetInstancePropertiesResponse, error) {
	ret := _m.Called()

	var r0 *sapcontrolapi.GetInstancePropertiesResponse
	if rf, ok := ret.Get(0).(func() *sapcontrolapi.GetInstancePropertiesResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetInstancePropertiesResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProcessList provides a mock function with given fields:
func (_m *WebService) GetProcessList() (*sapcontrolapi.GetProcessListResponse, error) {
	ret := _m.Called()

	var r0 *sapcontrolapi.GetProcessListResponse
	if rf, ok := ret.Get(0).(func() *sapcontrolapi.GetProcessListResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetProcessListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSystemInstanceList provides a mock function with given fields:
func (_m *WebService) GetSystemInstanceList() (*sapcontrolapi.GetSystemInstanceListResponse, error) {
	ret := _m.Called()

	var r0 *sapcontrolapi.GetSystemInstanceListResponse
	if rf, ok := ret.Get(0).(func() *sapcontrolapi.GetSystemInstanceListResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetSystemInstanceListResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVersionInfo provides a mock function with given fields:
func (_m *WebService) GetVersionInfo() (*sapcontrolapi.GetVersionInfoResponse, error) {
	ret := _m.Called()

	var r0 *sapcontrolapi.GetVersionInfoResponse
	if rf, ok := ret.Get(0).(func() *sapcontrolapi.GetVersionInfoResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetVersionInfoResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HACheckConfig provides a mock function with given fields:
func (_m *WebService) HACheckConfig() (*sapcontrolapi.HACheckConfigResponse, error) {
	ret := _m.Called()

	var r0 *sapcontrolapi.HACheckConfigResponse
	if rf, ok := ret.Get(0).(func() *sapcontrolapi.HACheckConfigResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.HACheckConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HAGetFailoverConfig provides a mock function with given fields:
func (_m *WebService) HAGetFailoverConfig() (*sapcontrolapi.HAGetFailoverConfigResponse, error) {
	ret := _m.Called()

	var r0 *sapcontrolapi.HAGetFailoverConfigResponse
	if rf, ok := ret.Get(0).(func() *sapcontrolapi.HAGetFailoverConfigResponse); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.HAGetFailoverConfigResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type NewWebServiceT interface {
	mock.TestingT
	Cleanup(func())
}

// NewWebService creates a new instance of WebService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewWebService(t NewWebServiceT) *WebService {
	mock := &WebService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
