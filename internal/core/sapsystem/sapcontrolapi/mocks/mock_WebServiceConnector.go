// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	sapcontrolapi "github.com/trento-project/agent/internal/core/sapsystem/sapcontrolapi"
)

// MockWebServiceConnector is an autogenerated mock type for the WebServiceConnector type
type MockWebServiceConnector struct {
	mock.Mock
}

type MockWebServiceConnector_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebServiceConnector) EXPECT() *MockWebServiceConnector_Expecter {
	return &MockWebServiceConnector_Expecter{mock: &_m.Mock}
}

// New provides a mock function with given fields: instanceNumber
func (_m *MockWebServiceConnector) New(instanceNumber string) sapcontrolapi.WebService {
	ret := _m.Called(instanceNumber)

	var r0 sapcontrolapi.WebService
	if rf, ok := ret.Get(0).(func(string) sapcontrolapi.WebService); ok {
		r0 = rf(instanceNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(sapcontrolapi.WebService)
		}
	}

	return r0
}

// MockWebServiceConnector_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type MockWebServiceConnector_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
//   - instanceNumber string
func (_e *MockWebServiceConnector_Expecter) New(instanceNumber interface{}) *MockWebServiceConnector_New_Call {
	return &MockWebServiceConnector_New_Call{Call: _e.mock.On("New", instanceNumber)}
}

func (_c *MockWebServiceConnector_New_Call) Run(run func(instanceNumber string)) *MockWebServiceConnector_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockWebServiceConnector_New_Call) Return(_a0 sapcontrolapi.WebService) *MockWebServiceConnector_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockWebServiceConnector_New_Call) RunAndReturn(run func(string) sapcontrolapi.WebService) *MockWebServiceConnector_New_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWebServiceConnector creates a new instance of MockWebServiceConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebServiceConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebServiceConnector {
	mock := &MockWebServiceConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
