// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	sapcontrolapi "github.com/trento-project/agent/internal/core/sapsystem/sapcontrolapi"
)

// MockWebService is an autogenerated mock type for the WebService type
type MockWebService struct {
	mock.Mock
}

type MockWebService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockWebService) EXPECT() *MockWebService_Expecter {
	return &MockWebService_Expecter{mock: &_m.Mock}
}

// GetInstanceProperties provides a mock function with given fields: ctx
func (_m *MockWebService) GetInstanceProperties(ctx context.Context) (*sapcontrolapi.GetInstancePropertiesResponse, error) {
	ret := _m.Called(ctx)

	var r0 *sapcontrolapi.GetInstancePropertiesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sapcontrolapi.GetInstancePropertiesResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sapcontrolapi.GetInstancePropertiesResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetInstancePropertiesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebService_GetInstanceProperties_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetInstanceProperties'
type MockWebService_GetInstanceProperties_Call struct {
	*mock.Call
}

// GetInstanceProperties is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWebService_Expecter) GetInstanceProperties(ctx interface{}) *MockWebService_GetInstanceProperties_Call {
	return &MockWebService_GetInstanceProperties_Call{Call: _e.mock.On("GetInstanceProperties", ctx)}
}

func (_c *MockWebService_GetInstanceProperties_Call) Run(run func(ctx context.Context)) *MockWebService_GetInstanceProperties_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWebService_GetInstanceProperties_Call) Return(_a0 *sapcontrolapi.GetInstancePropertiesResponse, _a1 error) *MockWebService_GetInstanceProperties_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebService_GetInstanceProperties_Call) RunAndReturn(run func(context.Context) (*sapcontrolapi.GetInstancePropertiesResponse, error)) *MockWebService_GetInstanceProperties_Call {
	_c.Call.Return(run)
	return _c
}

// GetProcessList provides a mock function with given fields: ctx
func (_m *MockWebService) GetProcessList(ctx context.Context) (*sapcontrolapi.GetProcessListResponse, error) {
	ret := _m.Called(ctx)

	var r0 *sapcontrolapi.GetProcessListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sapcontrolapi.GetProcessListResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sapcontrolapi.GetProcessListResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetProcessListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebService_GetProcessList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProcessList'
type MockWebService_GetProcessList_Call struct {
	*mock.Call
}

// GetProcessList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWebService_Expecter) GetProcessList(ctx interface{}) *MockWebService_GetProcessList_Call {
	return &MockWebService_GetProcessList_Call{Call: _e.mock.On("GetProcessList", ctx)}
}

func (_c *MockWebService_GetProcessList_Call) Run(run func(ctx context.Context)) *MockWebService_GetProcessList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWebService_GetProcessList_Call) Return(_a0 *sapcontrolapi.GetProcessListResponse, _a1 error) *MockWebService_GetProcessList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebService_GetProcessList_Call) RunAndReturn(run func(context.Context) (*sapcontrolapi.GetProcessListResponse, error)) *MockWebService_GetProcessList_Call {
	_c.Call.Return(run)
	return _c
}

// GetSystemInstanceList provides a mock function with given fields: ctx
func (_m *MockWebService) GetSystemInstanceList(ctx context.Context) (*sapcontrolapi.GetSystemInstanceListResponse, error) {
	ret := _m.Called(ctx)

	var r0 *sapcontrolapi.GetSystemInstanceListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sapcontrolapi.GetSystemInstanceListResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sapcontrolapi.GetSystemInstanceListResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetSystemInstanceListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebService_GetSystemInstanceList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSystemInstanceList'
type MockWebService_GetSystemInstanceList_Call struct {
	*mock.Call
}

// GetSystemInstanceList is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWebService_Expecter) GetSystemInstanceList(ctx interface{}) *MockWebService_GetSystemInstanceList_Call {
	return &MockWebService_GetSystemInstanceList_Call{Call: _e.mock.On("GetSystemInstanceList", ctx)}
}

func (_c *MockWebService_GetSystemInstanceList_Call) Run(run func(ctx context.Context)) *MockWebService_GetSystemInstanceList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWebService_GetSystemInstanceList_Call) Return(_a0 *sapcontrolapi.GetSystemInstanceListResponse, _a1 error) *MockWebService_GetSystemInstanceList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebService_GetSystemInstanceList_Call) RunAndReturn(run func(context.Context) (*sapcontrolapi.GetSystemInstanceListResponse, error)) *MockWebService_GetSystemInstanceList_Call {
	_c.Call.Return(run)
	return _c
}

// GetVersionInfo provides a mock function with given fields: ctx
func (_m *MockWebService) GetVersionInfo(ctx context.Context) (*sapcontrolapi.GetVersionInfoResponse, error) {
	ret := _m.Called(ctx)

	var r0 *sapcontrolapi.GetVersionInfoResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sapcontrolapi.GetVersionInfoResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sapcontrolapi.GetVersionInfoResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.GetVersionInfoResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebService_GetVersionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetVersionInfo'
type MockWebService_GetVersionInfo_Call struct {
	*mock.Call
}

// GetVersionInfo is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWebService_Expecter) GetVersionInfo(ctx interface{}) *MockWebService_GetVersionInfo_Call {
	return &MockWebService_GetVersionInfo_Call{Call: _e.mock.On("GetVersionInfo", ctx)}
}

func (_c *MockWebService_GetVersionInfo_Call) Run(run func(ctx context.Context)) *MockWebService_GetVersionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWebService_GetVersionInfo_Call) Return(_a0 *sapcontrolapi.GetVersionInfoResponse, _a1 error) *MockWebService_GetVersionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebService_GetVersionInfo_Call) RunAndReturn(run func(context.Context) (*sapcontrolapi.GetVersionInfoResponse, error)) *MockWebService_GetVersionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// HACheckConfig provides a mock function with given fields: ctx
func (_m *MockWebService) HACheckConfig(ctx context.Context) (*sapcontrolapi.HACheckConfigResponse, error) {
	ret := _m.Called(ctx)

	var r0 *sapcontrolapi.HACheckConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sapcontrolapi.HACheckConfigResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sapcontrolapi.HACheckConfigResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.HACheckConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebService_HACheckConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HACheckConfig'
type MockWebService_HACheckConfig_Call struct {
	*mock.Call
}

// HACheckConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWebService_Expecter) HACheckConfig(ctx interface{}) *MockWebService_HACheckConfig_Call {
	return &MockWebService_HACheckConfig_Call{Call: _e.mock.On("HACheckConfig", ctx)}
}

func (_c *MockWebService_HACheckConfig_Call) Run(run func(ctx context.Context)) *MockWebService_HACheckConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWebService_HACheckConfig_Call) Return(_a0 *sapcontrolapi.HACheckConfigResponse, _a1 error) *MockWebService_HACheckConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebService_HACheckConfig_Call) RunAndReturn(run func(context.Context) (*sapcontrolapi.HACheckConfigResponse, error)) *MockWebService_HACheckConfig_Call {
	_c.Call.Return(run)
	return _c
}

// HAGetFailoverConfig provides a mock function with given fields: ctx
func (_m *MockWebService) HAGetFailoverConfig(ctx context.Context) (*sapcontrolapi.HAGetFailoverConfigResponse, error) {
	ret := _m.Called(ctx)

	var r0 *sapcontrolapi.HAGetFailoverConfigResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*sapcontrolapi.HAGetFailoverConfigResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *sapcontrolapi.HAGetFailoverConfigResponse); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sapcontrolapi.HAGetFailoverConfigResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockWebService_HAGetFailoverConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HAGetFailoverConfig'
type MockWebService_HAGetFailoverConfig_Call struct {
	*mock.Call
}

// HAGetFailoverConfig is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockWebService_Expecter) HAGetFailoverConfig(ctx interface{}) *MockWebService_HAGetFailoverConfig_Call {
	return &MockWebService_HAGetFailoverConfig_Call{Call: _e.mock.On("HAGetFailoverConfig", ctx)}
}

func (_c *MockWebService_HAGetFailoverConfig_Call) Run(run func(ctx context.Context)) *MockWebService_HAGetFailoverConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockWebService_HAGetFailoverConfig_Call) Return(_a0 *sapcontrolapi.HAGetFailoverConfigResponse, _a1 error) *MockWebService_HAGetFailoverConfig_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockWebService_HAGetFailoverConfig_Call) RunAndReturn(run func(context.Context) (*sapcontrolapi.HAGetFailoverConfigResponse, error)) *MockWebService_HAGetFailoverConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockWebService creates a new instance of MockWebService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockWebService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockWebService {
	mock := &MockWebService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
