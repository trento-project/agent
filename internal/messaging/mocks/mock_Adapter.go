// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockAdapter is an autogenerated mock type for the Adapter type
type MockAdapter struct {
	mock.Mock
}

type MockAdapter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAdapter) EXPECT() *MockAdapter_Expecter {
	return &MockAdapter_Expecter{mock: &_m.Mock}
}

// Listen provides a mock function with given fields: handle
func (_m *MockAdapter) Listen(handle func(string, []byte) error) error {
	ret := _m.Called(handle)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(func(string, []byte) error) error); ok {
		r0 = rf(handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Listen_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Listen'
type MockAdapter_Listen_Call struct {
	*mock.Call
}

// Listen is a helper method to define mock.On call
//   - handle func(string , []byte) error
func (_e *MockAdapter_Expecter) Listen(handle interface{}) *MockAdapter_Listen_Call {
	return &MockAdapter_Listen_Call{Call: _e.mock.On("Listen", handle)}
}

func (_c *MockAdapter_Listen_Call) Run(run func(handle func(string, []byte) error)) *MockAdapter_Listen_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(func(string, []byte) error))
	})
	return _c
}

func (_c *MockAdapter_Listen_Call) Return(_a0 error) *MockAdapter_Listen_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Listen_Call) RunAndReturn(run func(func(string, []byte) error) error) *MockAdapter_Listen_Call {
	_c.Call.Return(run)
	return _c
}

// Publish provides a mock function with given fields: routingKey, contentType, message
func (_m *MockAdapter) Publish(routingKey string, contentType string, message []byte) error {
	ret := _m.Called(routingKey, contentType, message)

	if len(ret) == 0 {
		panic("no return value specified for Publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(routingKey, contentType, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type MockAdapter_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - routingKey string
//   - contentType string
//   - message []byte
func (_e *MockAdapter_Expecter) Publish(routingKey interface{}, contentType interface{}, message interface{}) *MockAdapter_Publish_Call {
	return &MockAdapter_Publish_Call{Call: _e.mock.On("Publish", routingKey, contentType, message)}
}

func (_c *MockAdapter_Publish_Call) Run(run func(routingKey string, contentType string, message []byte)) *MockAdapter_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]byte))
	})
	return _c
}

func (_c *MockAdapter_Publish_Call) Return(_a0 error) *MockAdapter_Publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Publish_Call) RunAndReturn(run func(string, string, []byte) error) *MockAdapter_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with no fields
func (_m *MockAdapter) Unsubscribe() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAdapter_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type MockAdapter_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
func (_e *MockAdapter_Expecter) Unsubscribe() *MockAdapter_Unsubscribe_Call {
	return &MockAdapter_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe")}
}

func (_c *MockAdapter_Unsubscribe_Call) Run(run func()) *MockAdapter_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAdapter_Unsubscribe_Call) Return(_a0 error) *MockAdapter_Unsubscribe_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAdapter_Unsubscribe_Call) RunAndReturn(run func() error) *MockAdapter_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAdapter creates a new instance of MockAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAdapter {
	mock := &MockAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
