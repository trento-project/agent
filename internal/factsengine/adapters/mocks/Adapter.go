// Code generated by mockery v2.12.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Adapter is an autogenerated mock type for the Adapter type
type Adapter struct {
	mock.Mock
}

// Listen provides a mock function with given fields: queue, exchange, handle
func (_m *Adapter) Listen(queue string, exchange string, handle func(string, []byte) error) error {
	ret := _m.Called(queue, exchange, handle)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, func(string, []byte) error) error); ok {
		r0 = rf(queue, exchange, handle)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Publish provides a mock function with given fields: exchange, contentType, message
func (_m *Adapter) Publish(exchange string, contentType string, message []byte) error {
	ret := _m.Called(exchange, contentType, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, []byte) error); ok {
		r0 = rf(exchange, contentType, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields:
func (_m *Adapter) Unsubscribe() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type NewAdapterT interface {
	mock.TestingT
	Cleanup(func())
}

// NewAdapter creates a new instance of Adapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewAdapter(t NewAdapterT) *Adapter {
	mock := &Adapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
