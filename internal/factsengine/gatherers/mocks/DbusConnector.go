// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	dbus "github.com/coreos/go-systemd/v22/dbus"

	mock "github.com/stretchr/testify/mock"
)

// DbusConnector is an autogenerated mock type for the DbusConnector type
type DbusConnector struct {
	mock.Mock
}

// GetUnitPropertiesContext provides a mock function with given fields: ctx, unit
func (_m *DbusConnector) GetUnitPropertiesContext(ctx context.Context, unit string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, unit)

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]interface{}, error)); ok {
		return rf(ctx, unit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, unit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, unit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListUnitsByNamesContext provides a mock function with given fields: ctx, units
func (_m *DbusConnector) ListUnitsByNamesContext(ctx context.Context, units []string) ([]dbus.UnitStatus, error) {
	ret := _m.Called(ctx, units)

	var r0 []dbus.UnitStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) ([]dbus.UnitStatus, error)); ok {
		return rf(ctx, units)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) []dbus.UnitStatus); ok {
		r0 = rf(ctx, units)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dbus.UnitStatus)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, units)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDbusConnector creates a new instance of DbusConnector. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDbusConnector(t interface {
	mock.TestingT
	Cleanup(func())
}) *DbusConnector {
	mock := &DbusConnector{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
