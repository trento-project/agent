// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockUserSearcher is an autogenerated mock type for the UserSearcher type
type MockUserSearcher struct {
	mock.Mock
}

type MockUserSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserSearcher) EXPECT() *MockUserSearcher_Expecter {
	return &MockUserSearcher_Expecter{mock: &_m.Mock}
}

// GetUsernameByID provides a mock function with given fields: userID
func (_m *MockUserSearcher) GetUsernameByID(userID string) (string, error) {
	ret := _m.Called(userID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserSearcher_GetUsernameByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUsernameByID'
type MockUserSearcher_GetUsernameByID_Call struct {
	*mock.Call
}

// GetUsernameByID is a helper method to define mock.On call
//   - userID string
func (_e *MockUserSearcher_Expecter) GetUsernameByID(userID interface{}) *MockUserSearcher_GetUsernameByID_Call {
	return &MockUserSearcher_GetUsernameByID_Call{Call: _e.mock.On("GetUsernameByID", userID)}
}

func (_c *MockUserSearcher_GetUsernameByID_Call) Run(run func(userID string)) *MockUserSearcher_GetUsernameByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserSearcher_GetUsernameByID_Call) Return(_a0 string, _a1 error) *MockUserSearcher_GetUsernameByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserSearcher_GetUsernameByID_Call) RunAndReturn(run func(string) (string, error)) *MockUserSearcher_GetUsernameByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserSearcher creates a new instance of MockUserSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserSearcher {
	mock := &MockUserSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
