// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	mountinfo "github.com/moby/sys/mountinfo"
	mock "github.com/stretchr/testify/mock"
)

// MountParserInterface is an autogenerated mock type for the MountParserInterface type
type MountParserInterface struct {
	mock.Mock
}

// GetMounts provides a mock function with given fields: f
func (_m *MountParserInterface) GetMounts(f mountinfo.FilterFunc) ([]*mountinfo.Info, error) {
	ret := _m.Called(f)

	var r0 []*mountinfo.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(mountinfo.FilterFunc) ([]*mountinfo.Info, error)); ok {
		return rf(f)
	}
	if rf, ok := ret.Get(0).(func(mountinfo.FilterFunc) []*mountinfo.Info); ok {
		r0 = rf(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*mountinfo.Info)
		}
	}

	if rf, ok := ret.Get(1).(func(mountinfo.FilterFunc) error); ok {
		r1 = rf(f)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMountParserInterface creates a new instance of MountParserInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMountParserInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MountParserInterface {
	mock := &MountParserInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
