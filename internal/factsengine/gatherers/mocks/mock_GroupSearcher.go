// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// MockGroupSearcher is an autogenerated mock type for the GroupSearcher type
type MockGroupSearcher struct {
	mock.Mock
}

type MockGroupSearcher_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGroupSearcher) EXPECT() *MockGroupSearcher_Expecter {
	return &MockGroupSearcher_Expecter{mock: &_m.Mock}
}

// GetGroupByID provides a mock function with given fields: groupID
func (_m *MockGroupSearcher) GetGroupByID(groupID string) (string, error) {
	ret := _m.Called(groupID)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(groupID)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(groupID)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGroupSearcher_GetGroupByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGroupByID'
type MockGroupSearcher_GetGroupByID_Call struct {
	*mock.Call
}

// GetGroupByID is a helper method to define mock.On call
//   - groupID string
func (_e *MockGroupSearcher_Expecter) GetGroupByID(groupID interface{}) *MockGroupSearcher_GetGroupByID_Call {
	return &MockGroupSearcher_GetGroupByID_Call{Call: _e.mock.On("GetGroupByID", groupID)}
}

func (_c *MockGroupSearcher_GetGroupByID_Call) Run(run func(groupID string)) *MockGroupSearcher_GetGroupByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockGroupSearcher_GetGroupByID_Call) Return(_a0 string, _a1 error) *MockGroupSearcher_GetGroupByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockGroupSearcher_GetGroupByID_Call) RunAndReturn(run func(string) (string, error)) *MockGroupSearcher_GetGroupByID_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGroupSearcher creates a new instance of MockGroupSearcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGroupSearcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGroupSearcher {
	mock := &MockGroupSearcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
