// Code generated by mockery v2.32.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/trento-project/agent/pkg/factsengine/entities"

	mock "github.com/stretchr/testify/mock"
)

// MockFactGatherer is an autogenerated mock type for the FactGatherer type
type MockFactGatherer struct {
	mock.Mock
}

type MockFactGatherer_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFactGatherer) EXPECT() *MockFactGatherer_Expecter {
	return &MockFactGatherer_Expecter{mock: &_m.Mock}
}

// Gather provides a mock function with given fields: _a0, factsRequests
func (_m *MockFactGatherer) Gather(_a0 context.Context, factsRequests []entities.FactRequest) ([]entities.Fact, error) {
	ret := _m.Called(_a0, factsRequests)

	var r0 []entities.Fact
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []entities.FactRequest) ([]entities.Fact, error)); ok {
		return rf(_a0, factsRequests)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []entities.FactRequest) []entities.Fact); ok {
		r0 = rf(_a0, factsRequests)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Fact)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []entities.FactRequest) error); ok {
		r1 = rf(_a0, factsRequests)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockFactGatherer_Gather_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Gather'
type MockFactGatherer_Gather_Call struct {
	*mock.Call
}

// Gather is a helper method to define mock.On call
//   - _a0 context.Context
//   - factsRequests []entities.FactRequest
func (_e *MockFactGatherer_Expecter) Gather(_a0 interface{}, factsRequests interface{}) *MockFactGatherer_Gather_Call {
	return &MockFactGatherer_Gather_Call{Call: _e.mock.On("Gather", _a0, factsRequests)}
}

func (_c *MockFactGatherer_Gather_Call) Run(run func(_a0 context.Context, factsRequests []entities.FactRequest)) *MockFactGatherer_Gather_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]entities.FactRequest))
	})
	return _c
}

func (_c *MockFactGatherer_Gather_Call) Return(_a0 []entities.Fact, _a1 error) *MockFactGatherer_Gather_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockFactGatherer_Gather_Call) RunAndReturn(run func(context.Context, []entities.FactRequest) ([]entities.Fact, error)) *MockFactGatherer_Gather_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFactGatherer creates a new instance of MockFactGatherer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFactGatherer(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFactGatherer {
	mock := &MockFactGatherer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
